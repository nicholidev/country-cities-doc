"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=l,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5778:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const r={id:"quick",title:"\ud83e\ude84 Quick Guide",sidebar_position:7},i=void 0,o={unversionedId:"quick",id:"quick",title:"\ud83e\ude84 Quick Guide",description:"Introduction",source:"@site/docs/v1/quick.md",sourceDirName:".",slug:"/quick",permalink:"/country-cities-doc/v1/quick",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"quick",title:"\ud83e\ude84 Quick Guide",sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Cities",permalink:"/country-cities-doc/v1/amd/cities"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Npm",id:"npm",level:3},{value:"Yarn",id:"yarn",level:3},{value:"Import",id:"import",level:2},{value:"ES6",id:"es6",level:3},{value:"Amd",id:"amd",level:3},{value:"Countries",id:"countries",level:2},{value:"Get all countries",id:"get-all-countries",level:3},{value:"Get country by its code",id:"get-country-by-its-code",level:3},{value:"States",id:"states",level:2},{value:"Get all states",id:"get-all-states",level:3},{value:"Get States by Country",id:"get-states-by-country",level:3},{value:"Get States by Code",id:"get-states-by-code",level:3},{value:"Cities",id:"cities",level:2},{value:"Get all cities",id:"get-all-cities",level:3},{value:"Get Cities by Country",id:"get-cities-by-country",level:3},{value:"Get Cities by State and Country",id:"get-cities-by-state-and-country",level:3}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"This package is the basic library for Countries, States(or province) and Cities that is providing JSON of data."),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("h3",{id:"npm"},"Npm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"npm i coutry-cities --save\n")),(0,l.kt)("p",null,"Uninstall"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"npm uninstall coutry-cities\n")),(0,l.kt)("h3",{id:"yarn"},"Yarn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"yarn add country-cities\n")),(0,l.kt)("p",null,"Uninstall"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"yarn remove coutry-cities\n")),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"import"},"Import"),(0,l.kt)("h3",{id:"es6"},"ES6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { countries, states, cities } from "country-cities";\n')),(0,l.kt)("h3",{id:"amd"},"Amd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let countries = require('country-state-city').countries;\nlet states = require('country-state-city').countries;\nlet cities = require('country-state-city').countries;\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let { countries, states, cities } = require('country-state-city');\n")),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"countries"},"Countries"),(0,l.kt)("h3",{id:"get-all-countries"},"Get all countries"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const allCountries = countries.all();\n\nconsole.log(allCountries)\n")),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'[\n  {\n    "isoCode": "US",\n    "name": "United State",\n    "phonecode": "1",\n    "flag": "\ud83c\uddfa\ud83c\uddf8",\n    "currency": "USD",\n    "latitude": "38.00000000",\n    "longitude": "-97.00000000",\n    "timezones": [\n      {\n        "zoneName": "America/Adak",\n        "gmtOffset": -36000,\n        "gmtOffsetName": "UTC-10:00",\n        "abbreviation": "HST",\n        "tzName": "Hawaii\u2013Aleutian Standard Time"\n      },\n      {\n        "zoneName": "America/Kentucky/Louisville",\n        "gmtOffset": -18000,\n        "gmtOffsetName": "UTC-05:00",\n        "abbreviation": "EST",\n        "tzName": "Eastern Standard Time (North America)"\n      },\n      ...\n    ]\n  },\n  {\n    "isoCode": "FR",\n    "name": "France",\n    "phonecode": "33",\n    "flag": "\ud83c\uddeb\ud83c\uddf7",\n    "currency": "EUR",\n    "latitude": "46.00000000",\n    "longitude": "2.00000000",\n    "timezones": [\n      {\n        "zoneName": "Europe/Paris",\n        "gmtOffset": 3600,\n        "gmtOffsetName": "UTC+01:00",\n        "abbreviation": "CET",\n        "tzName": "Central European Time"\n      }\n    ]\n  }\n  ...\n]\n')),(0,l.kt)("h3",{id:"get-country-by-its-code"},"Get country by its code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const us = countries.getByCode("US");\n\nconsole.log(us)\n')),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "isoCode": "US",\n  "name": "United State",\n  "phonecode": "1",\n  "flag": "\ud83c\uddfa\ud83c\uddf8",\n  "currency": "USD",\n  "latitude": "38.00000000",\n  "longitude": "-97.00000000",\n  "timezones": [\n    {\n      "zoneName": "America/Adak",\n      "gmtOffset": -36000,\n      "gmtOffsetName": "UTC-10:00",\n      "abbreviation": "HST",\n      "tzName": "Hawaii\u2013Aleutian Standard Time"\n    },\n    {\n      "zoneName": "America/Kentucky/Louisville",\n      "gmtOffset": -18000,\n      "gmtOffsetName": "UTC-05:00",\n      "abbreviation": "EST",\n      "tzName": "Eastern Standard Time (North America)"\n    }, \n    ...\n  ]\n}\n')),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"states"},"States"),(0,l.kt)("h3",{id:"get-all-states"},"Get all states"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const allStates = states.all();\n\nconsole.log(allStates)\n")),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'[\n  {\n    countryCode: "US",\n    isoCode: "VA",\n    latitude: "37.43157340",\n    longitude: "-78.65689420",\n    name: "Virginia"\n  },\n  {\n    countryCode: "US",\n    isoCode: "IL",\n    latitude: "40.63312490",\n    longitude: "-89.39852830",\n    name: "Illinois"\n  },\n  ...\n]\n')),(0,l.kt)("h3",{id:"get-states-by-country"},"Get States by Country"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const usStates = states.getByCountry("US");\n\nconsole.log(usStates)\n')),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'[\n  {\n    countryCode: "US",\n    isoCode: "VA",\n    latitude: "37.43157340",\n    longitude: "-78.65689420",\n    name: "Virginia"\n  },\n  {\n    countryCode: "US",\n    isoCode: "IL",\n    latitude: "40.63312490",\n    longitude: "-89.39852830",\n    name: "Illinois"\n  },\n  ...\n]\n')),(0,l.kt)("h3",{id:"get-states-by-code"},"Get States by Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const vaState = states.getByCode("VA", "US");\n\nconsole.log(vaState)\n')),(0,l.kt)("blockquote",null,(0,l.kt)("b",null,"Important"),": The country code should be entered second parameter"),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  countryCode: "US",\n  isoCode: "VA",\n  latitude: "37.43157340",\n  longitude: "-78.65689420",\n  name: "Virginia"\n}\n')),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"cities"},"Cities"),(0,l.kt)("h3",{id:"get-all-cities"},"Get all cities"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const allCities = cities.all();\n\nconsole.log(allCities)\n")),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'[\n  {\n    countryCode: "AU",\n    latitude: "-31.12756000",\n    longitude: "150.90711000",\n    name: "Hillvue",\n    stateCode: "NSW",\n  },\n  {\n    countryCode: "AU",\n    latitude: "-33.91878000",\n    longitude: "150.86314000",\n    name: "Hinchinbrook",\n    stateCode: "NSW",\n  },\n  ...\n]\n')),(0,l.kt)("h3",{id:"get-cities-by-country"},"Get Cities by Country"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const auCities = cities.getByCountry("AU");\n\nconsole.log(auCities)\n')),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'[\n  {\n    countryCode: "AU",\n    latitude: "-31.12756000",\n    longitude: "150.90711000",\n    name: "Hillvue",\n    stateCode: "NSW",\n  },\n  {\n    countryCode: "AU",\n    latitude: "-33.91878000",\n    longitude: "150.86314000",\n    name: "Hinchinbrook",\n    stateCode: "NSW",\n  },\n  ...\n]\n')),(0,l.kt)("h3",{id:"get-cities-by-state-and-country"},"Get Cities by State and Country"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const nswCities = cities.getByState("NSW", "AU");\n\nconsole.log(nswCities)\n')),(0,l.kt)("blockquote",null,(0,l.kt)("b",null,"Important"),": The country code should be entered second parameter"),(0,l.kt)("p",null,"The result will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'[\n  {\n    countryCode: "AU",\n    latitude: "-31.12756000",\n    longitude: "150.90711000",\n    name: "Hillvue",\n    stateCode: "NSW",\n  },\n  {\n    countryCode: "AU",\n    latitude: "-33.91878000",\n    longitude: "150.86314000",\n    name: "Hinchinbrook",\n    stateCode: "NSW",\n  },\n  ...\n]\n')))}d.isMDXComponent=!0}}]);